links = {
    house_head = {
        input_scopes = dynasty_house
        output_scope = character
    }
    capital_vassal = {
        input_scopes = landed_title
        output_scope = landed_title
    }
    controlled_faith = {
        input_scopes = landed_title
        output_scope = faith
    }
    current_heir = {
        input_scopes = landed_title
        output_scope = character
    }
    de_facto_liege = {
        input_scopes = landed_title
        output_scope = landed_title
    }
    de_jure_liege = {
        input_scopes = landed_title
        output_scope = landed_title
    }
    holder = {
        input_scopes = landed_title
        output_scope = character
    }
    lessee = {
        input_scopes = landed_title
        output_scope = character
    }
    lessee_title = {
        input_scopes = landed_title
        output_scope = landed_title
    }
    previous_holder = {
        input_scopes = landed_title
        output_scope = character
    }
    title_capital_county = {
        input_scopes = landed_title
        output_scope = landed_title
    }
    title_province = {
        input_scopes = landed_title
        output_scope = province
    }
    culture_head = {
        input_scopes = culture
        output_scope = character
    }
    betrothed = {
        input_scopes = character
        output_scope = character
    }
    capital_barony = {
        input_scopes = character
        output_scope = landed_title
    }
    capital_county = {
        input_scopes = character
        output_scope = landed_title
    }
    capital_province = {
        input_scopes = character
        output_scope = province
    }
    commanding_army = {
        input_scopes = character
        output_scope = army
    }
    concubinist = {
        input_scopes = character
        output_scope = character
    }
    council_task = {
        input_scopes = character
        output_scope = council_task
    }
	### Scope to the councillor in a council task
    councillor = {
        desc = " Scope to the councillor in a council task"
        input_scopes = council_task
        output_scope = character
    }
    councillor_task_target = {
        input_scopes = character
    }
    court_owner = {
        input_scopes = character
        output_scope = character
    }
    council_position = {
        from_data = yes
        type = scope
        prefix = cp:
        data_source = <council_position>
        input_scopes = character
        output_scope = character
    }
    court_position = {
        input_scopes = character
        output_scopes = character
    }
    court_amenity_category = {
        data_source = <court_amenity_category>
        input_scopes = character
        output_scopes = court_amenity_category
    }
    designated_heir = {
        input_scopes = character
        output_scope = character
    }
    dynasty = {
        input_scopes = character
        output_scope = dynasty
    }
    employer = {
        input_scopes = character
        output_scope = character
    }
    employee = {
        input_scopes = character
        output_scope = character
    }
    father = {
        input_scopes = character
        output_scope = character
    }
    ghw_beneficiary = {
        input_scopes = character
        output_scope = character
    }
    host = {
        input_scopes = character
        output_scope = character
    }
    house = {
        input_scopes = character
        output_scope = dynasty_house
    }
    imprisoner = {
        input_scopes = character
        output_scope = character
    }
    joined_faction = {
        input_scopes = character
        output_scope = faction
    }
    killer = {
        input_scopes = character
        output_scope = character
    }
    knight_army = {
        input_scopes = character
        output_scope = army
    }
    liege = {
        input_scopes = character
        output_scope = character
    }
    liege_or_court_owner = {
        input_scopes = character
        output_scope = character
    }
    matchmaker = {
        input_scopes = character
        output_scope = character
    }
    mother = {
        input_scopes = character
        output_scope = character
    }
    player_heir = {
        input_scopes = character
        output_scope = character
    }
    pregnancy_assumed_father = {
        input_scopes = character
        output_scope = character
    }
    pregnancy_real_father = {
        input_scopes = character
        output_scope = character
    }
    primary_heir = {
        input_scopes = character
        output_scope = character
    }
    primary_partner = {
        input_scopes = character
        output_scope = character
    }
    primary_spouse = {
        input_scopes = character
        output_scope = character
    }
    primary_title = {
        input_scopes = character
        output_scope = landed_title
    }
    real_father = {
        input_scopes = character
        output_scope = character
    }
    realm_priest = {
        input_scopes = character
        output_scope = character
    }
    top_liege = {
        input_scopes = character
        output_scope = character
    }
	### The level of the provided contract type in the scoped objects current vassal contract
    vassal_contract_obligation_level = {
        desc = " The level of the provided contract type in the scoped objects current vassal contract"
        input_scopes = character
        output_scope = value
    }
    culture_group = {
        input_scopes = { character landed_title province culture }
        output_scope = culture_group
    }
    great_holy_war = {
        input_scopes = faith
        output_scope = great_holy_war
    }
    religious_head = {
        input_scopes = faith
        output_scope = character
    }
    religious_head_title = {
        input_scopes = faith
        output_scope = landed_title
    }
    secret_owner = {
        input_scopes = secret
        output_scope = character
    }
    secret_target = {
        input_scopes = secret
        output_scope = character
    }
    province_owner = {
        input_scopes = province
        output_scope = character
    }
    culture = {
        input_scopes = { character landed_title province }
        output_scope = culture
    }
    holy_order_patron = {
        input_scopes = holy_order
        output_scope = character
    }
    leader = {
        input_scopes = holy_order
        output_scope = character
    }
    title = {
        input_scopes = holy_order
        output_scope = landed_title
    }
    army_commander = {
        input_scopes = army
        output_scope = character
    }
    army_owner = {
        input_scopes = army
        output_scope = character
    }
	### The blue value of a color
    blue = {
        desc = " The blue value of a color"
        input_scopes = color
        output_scope = value
    }
	### The brightness value of a color
    brightness = {
        desc = " The brightness value of a color"
        input_scopes = color
        output_scope = value
    }
	### The green value of a color
    green = {
        desc = " The green value of a color"
        input_scopes = color
        output_scope = value
    }
	### The hue value of a color
    hue = {
        desc = " The hue value of a color"
        input_scopes = color
        output_scope = value
    }
	### The red value of a color
    red = {
        desc = " The red value of a color"
        input_scopes = color
        output_scope = value
    }
	### The saturation value of a color
    saturation = {
        desc = " The saturation value of a color"
        input_scopes = color
        output_scope = value
    }
    combat = {
        input_scopes = combat_side
        output_scope = combat
    }
    enemy_side = {
        input_scopes = combat_side
        output_scope = combat_side
    }
    side_commander = {
        input_scopes = combat_side
        output_scope = character
    }
    side_primary_participant = {
        input_scopes = combat_side
        output_scope = character
    }
    ghw_designated_winner = {
        input_scopes = great_holy_war
        output_scope = character
    }
    ghw_target_character = {
        input_scopes = great_holy_war
        output_scope = character
    }
    ghw_target_title = {
        input_scopes = great_holy_war
        output_scope = landed_title
    }
    ghw_title_recipient = {
        input_scopes = great_holy_war
        output_scope = character
    }
    ghw_war = {
        input_scopes = great_holy_war
        output_scope = war
    }
    ghw_war_declarer = {
        input_scopes = great_holy_war
        output_scope = character
    }
    dynast = {
        input_scopes = dynasty
        output_scope = character
    }
    scheme_defender = {
        input_scopes = scheme
        output_scope = character
    }
    scheme_owner = {
        input_scopes = scheme
        output_scope = character
    }
    scheme_target = {
        input_scopes = scheme
        output_scope = character
    }
    claimant = {
        input_scopes = { war casus_belli }
        output_scope = character
    }
    primary_attacker = {
        input_scopes = { war casus_belli }
        output_scope = character
    }
    primary_defender = {
        input_scopes = { war casus_belli }
        output_scope = character
    }
    combat_attacker = {
        input_scopes = combat
        output_scope = combat_side
    }
    combat_defender = {
        input_scopes = combat
        output_scope = combat_side
    }
    combat_war = {
        input_scopes = combat
        output_scope = war
    }
    location = {
        input_scopes = { character combat army }
        output_scope = province
    }
    faith = {
        input_scopes = { character landed_title province great_holy_war }
        output_scope = faith
    }
    story_owner = {
        input_scopes = story_cycle
        output_scope = character
    }
    faction_leader = {
        input_scopes = faction
        output_scope = character
    }
    faction_target = {
        input_scopes = faction
        output_scope = character
    }
    faction_war = {
        input_scopes = faction
        output_scope = war
    }
    special_character = {
        input_scopes = faction
        output_scope = character
    }
    special_title = {
        input_scopes = faction
        output_scope = landed_title
    }
    religion = {
        input_scopes = { character landed_title province faith great_holy_war }
        output_scope = religion
    }
    casus_belli = {
        input_scopes = war
        output_scope = casus_belli
    }
    activity_owner = {
        input_scopes = activity
        output_scope = character
    }
    activity_province = {
        input_scopes = activity
        output_scope = province
    }
    war = {
        input_scopes = casus_belli
        output_scope = war
    }
    barony = {
        input_scopes = { landed_title province }
        output_scope = landed_title
    }
    barony_controller = {
        input_scopes = { landed_title province }
        output_scope = character
    }
    county = {
        input_scopes = { landed_title province }
        output_scope = landed_title
    }
    county_controller = {
        input_scopes = { landed_title province }
        output_scope = character
    }
    duchy = {
        input_scopes = { landed_title province }
        output_scope = landed_title
    }
    empire = {
        input_scopes = { landed_title province }
        output_scope = landed_title
    }
    kingdom = {
        input_scopes = { landed_title province }
        output_scope = landed_title
    }
	### Reference the value of a numeric value in an array define: array_define:Namespace|Name|Index. Index is 0-based.
    array_define = {
        desc = " Reference the value of a numeric value in an array define: array_define:Namespace|Name|Index. Index is 0-based."
        from_data = yes
        data_source = <array_define>
        prefix = array_define:
        output_scope = value
    }
    character = {
        from_data = yes
        type = scope
        data_source = <character>
        prefix = character:
        output_scope = character
    }
    base_value = {
        output_scope = value
    }
	### A comparison trigger that will return its value in the context it is used eg: root.gold
    compare_value = {
        desc = " A comparison trigger that will return its value in the context it is used eg: root.gold"
        output_scope = value
    }
    culture = {
        from_data = yes
        type = scope
        data_source = <culture>
        prefix = culture:
        output_scope = culture
    }
    culture_group = {
        from_data = yes
        type = scope
        data_source = <culture_group>
        prefix = culture_group:
        output_scope = culture_group
    }
	### Adds custom text between scope changes
    custom = {
        desc = " Adds custom text between scope changes"
    }
	### Reference the value of a numeric define: define:Namespace|Name
    define = {
        desc = " Reference the value of a numeric define: define:Namespace|Name"
        from_data = yes
        data_source = <define>
        prefix = define:
        output_scope = value
    }
    dummy_female = {
        output_scope = character
    }
    dummy_male = {
        output_scope = character
    }
    dynasty = {
        output_scope = dynasty
    }
    faith = {
        from_data = yes
        type = scope
        data_source = <faith>
        prefix = faith:
        output_scope = faith
    }
	### Flag literals eg: flag:the_boss
    flag = {
        desc = " Flag literals eg: flag:the_boss"
        from_data = yes
        data_source = <flag>
        prefix = flag:
        output_scope = flag
    }
	### Reference a previous set global variable via its name eg: global_var:important_thing
    global_var = {
        desc = " Reference a previous set global variable via its name eg: global_var:important_thing"
        from_data = yes
        type = both
        data_source = value[global_variable]
        prefix = global_var:
    }
    house = {
        output_scope = dynasty_house
    }
	### Reference a previous set local variable via its name eg: local_var:person_of_interest
    local_var = {
        desc = " Reference a previous set local variable via its name eg: local_var:person_of_interest"
        from_data = yes
        type = both
        data_source = value[local_variable]
        prefix = local_var:
    }
	### A script value that will calculate and returns its value in the context it is used
    named_script_value = {
        desc = " A script value that will calculate and returns its value in the context it is used"
        output_scope = value
    }
	### Directly scope to a specific province by its ID
    province = {
        desc = " Directly scope to a specific province by its ID"
        from_data = yes
        data_source = <province>
        prefix = province:
        output_scope = province
    }
    religion = {
        from_data = yes
        type = scope
        data_source = <religion>
        prefix = religion:
        output_scope = religion
    }
	### Reference a previously saved scope via its name eg: scope:target
    scope = {
        desc = " Reference a previously saved scope via its name eg: scope:target"
        from_data = yes
        data_source = value[event_target]
        prefix = scope:
    }
    ### Global link to title scope of given landed title template string
    title = {
        desc = " Global link to title scope of given landed title template string"
        from_data = yes
        type = scope
        data_source = <landed_title>
        prefix = title:
        output_scope = landed_title
    }
	### Reference a previous set variable via its name eg: var:mortal_enemy
    var = {
        desc = " Reference a previous set variable via its name eg: var:mortal_enemy"
        from_data = yes
		type = both
        prefix = var:
        data_source = value[variable]
    }
	### Get the trait with the specified key
    trait = {
        desc = " Get the trait with the specified key"
        from_data = yes
        data_source = <trait>
        prefix = trait:
        output_scope = trait
    }
    inspiration = {
        input_scopes = inspiration
        output_scope = inspiration
    }
    inspiration_sponsor = {
        input_scopes = inspiration
        output_scope = character
    }
}
